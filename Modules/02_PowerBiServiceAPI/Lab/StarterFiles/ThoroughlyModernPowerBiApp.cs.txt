using System;
using System.Security;
using Microsoft.Identity.Client;
using Microsoft.PowerBI.Api.V2;
using Microsoft.Rest;

namespace ThoroughlyModernPowerBiApp {

  class Program {

    // update the following three constants with values from your envirionment
    const string appWorkspaceId = "";
    const string clientIdPublicApp = "";
    const string redirectUri = "https://localhost/app1234";

    // generic v2 endpoint references "organizations" instead of "common"
    const string tenantAuthrority = "https://login.microsoftonline.com/organizations";

    // Power BI Service API Root URL
    const string urlPowerBiRestApiRoot = "https://api.powerbi.com/";

    static string[] scopesDefault = new string[] {
        "https://analysis.windows.net/powerbi/api/.default"
      };

    static string[] scopesReadWorkspaceAssets= new string[] {
        "https://analysis.windows.net/powerbi/api/Dashboard.Read.All",
        "https://analysis.windows.net/powerbi/api/Dataset.Read.All",
        "https://analysis.windows.net/powerbi/api/Report.Read.All",
      };

    static string[] scopesReadUserApps = new string[] {
        "https://analysis.windows.net/powerbi/api/App.Read.All",
      };

    static string[] scopesManageWorkspaceAssets = new string[] {
        "https://analysis.windows.net/powerbi/api/Content.Create",
        "https://analysis.windows.net/powerbi/api/Dashboard.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Dataset.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Group.Read.All",
        "https://analysis.windows.net/powerbi/api/Report.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Workspace.ReadWrite.All"
      };

    static string[] scopesKitchenSink = new string[] {
        "https://analysis.windows.net/powerbi/api/Tenant.ReadWrite.All", // requires admin
        "https://analysis.windows.net/powerbi/api/App.Read.All",
        "https://analysis.windows.net/powerbi/api/Capacity.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Content.Create",
        "https://analysis.windows.net/powerbi/api/Dashboard.Read.All",
        "https://analysis.windows.net/powerbi/api/Dashboard.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Data.Alter_Any",
        "https://analysis.windows.net/powerbi/api/Dataflow.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Dataset.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Gateway.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Group.Read.All",
        "https://analysis.windows.net/powerbi/api/Metadata.View_Any",
        "https://analysis.windows.net/powerbi/api/Report.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/StorageAccount.ReadWrite.All",
        "https://analysis.windows.net/powerbi/api/Workspace.ReadWrite.All"
      };

    static string GetAccessTokenInteractive(string[] scopes) {

      PublicClientApplicationOptions options = new PublicClientApplicationOptions();
   
      var appPublic = PublicClientApplicationBuilder.Create(clientIdPublicApp)
                       .WithAuthority(tenantAuthrority)
                       .WithRedirectUri(redirectUri)
                       .Build();

      var authResult = appPublic.AcquireTokenInteractive(scopes)
                                .WithPrompt(Prompt.SelectAccount)
                                .ExecuteAsync().Result;

      return authResult.AccessToken;
    }

    static string GetAccessTokenWithUserPassword(string[] scopes) {

      var appPublic = PublicClientApplicationBuilder.Create(clientIdPublicApp)
                       .WithAuthority("https://login.microsoftonline.com/msd0429.onMicrosoft.com")
                       .Build();

      string username = "tedp@cruces0506.onMicrosoft.com";
      string userPassword = "Pa$$word!";
      SecureString userPasswordSecure = new SecureString();
      foreach (char c in userPassword) {
        userPasswordSecure.AppendChar(c);
      }

      var authResult = appPublic.AcquireTokenByUsernamePassword(scopes, username, userPasswordSecure).ExecuteAsync().Result;
      return authResult.AccessToken;

    }

    static void Main() {
      DisplayAppWorkspaceAssets();
      
      //DisplayApps();
      
      //DisplayAllWorkspacesInTenant();
    }

    static void DisplayAppWorkspaceAssets() {

      string AccessToken = GetAccessTokenInteractive(scopesDefault);
      var pbiClient = new PowerBIClient(new Uri(urlPowerBiRestApiRoot),
                                             new TokenCredentials(AccessToken, "Bearer"));

      Console.WriteLine();
      Console.WriteLine("Dashboards:");
      var dashboards = pbiClient.Dashboards.GetDashboardsInGroup(appWorkspaceId).Value;
      foreach (var dashboard in dashboards) {
        Console.WriteLine(" - " + dashboard.DisplayName + " [" + dashboard.Id + "]");
      }

      Console.WriteLine();
      Console.WriteLine("Reports:");
      var reports = pbiClient.Reports.GetReportsInGroup(appWorkspaceId).Value;
      foreach (var report in reports) {
        Console.WriteLine(" - " + report.Name + " [" + report.Id + "]");
      }

      //Console.WriteLine();
      //Console.WriteLine("Datasets:");
      //var datasets = pbiClient.Datasets.GetDatasetsInGroup(appWorkspaceId).Value;
      //foreach (var dataset in datasets) {
      //  Console.WriteLine(" - " + dataset.Name + " [" + dataset.Id + "]");
      //}

      Console.WriteLine();
    }

    static void DisplayApps() {

      string AccessToken = GetAccessTokenInteractive(scopesReadUserApps);
      var pbiClient = new PowerBIClient(new Uri(urlPowerBiRestApiRoot),
                                             new TokenCredentials(AccessToken, "Bearer"));

      Console.WriteLine();
      var apps = pbiClient.Apps.GetApps().Value;
      foreach (var app in apps) {
        Console.WriteLine(app.Name + " [" + app.Id + "]");
        var dashboards = pbiClient.Apps.GetDashboards(app.Id).Value;
        Console.WriteLine("- Dashboards");
        foreach(var dashboard in dashboards) {
          Console.WriteLine("  - " + dashboard.DisplayName);
        }
        var reports = pbiClient.Apps.GetReports(app.Id).Value;
        Console.WriteLine("- Reports");
        foreach (var report in reports) {
          Console.WriteLine("  - " + report.Name);
        }
        Console.WriteLine();
      }

      Console.WriteLine();
    }

    static void DisplayAllWorkspacesInTenant() {

      string AccessToken = GetAccessTokenInteractive(scopesKitchenSink);
      var pbiClient = new PowerBIClient(new Uri(urlPowerBiRestApiRoot),
                                             new TokenCredentials(AccessToken, "Bearer"));

      Console.WriteLine();
      Console.WriteLine("All Workpaces in Tenant:");
      var workspaces = pbiClient.Groups.GetGroupsAsAdmin(top: 100).Value;
      foreach (var workspace in workspaces) {
        Console.WriteLine("- " + workspace.Type + ": " + workspace.Name + " [" + workspace.Id + "] ");
      }
      Console.WriteLine();
    }

  }
}